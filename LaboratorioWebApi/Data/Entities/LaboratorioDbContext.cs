// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using LaboratorioWebApi.Data.Procedures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaboratorioWebApi.Data.Entities;

public partial class LaboratorioDbContext : DbContext
{
    public LaboratorioDbContext(DbContextOptions<LaboratorioDbContext> options)
        : base(options)
    {
    }

    public DbSet<sp_costo_deriv_por_laboratorioResult> SpCostoDerivPorLaboratorioResults { get; set; }

    public DbSet<sp_costo_total_derivacionesResult> SpCostoTotalDerivacionesResults { get; set; }

    public DbSet<sp_estado_muestrasResult> SpEstadoMuestrasResults { get; set; }

    public DbSet<sp_muestras_para_informarResult> SpMuestrasParaInformarResults { get; set; }

    public DbSet<sp_practicas_fuera_coberturaResult> SpPracticasFueraCoberturaResults { get; set; }

    public virtual DbSet<Barrios> Barrios { get; set; }

    public virtual DbSet<Ciudades> Ciudades { get; set; }

    public virtual DbSet<Convenios> Convenios { get; set; }

    public virtual DbSet<ConveniosPracticas> ConveniosPracticas { get; set; }

    public virtual DbSet<DetallesFactura> DetallesFacturas { get; set; }

    public virtual DbSet<DetallesMuestras> DetallesMuestras { get; set; }

    public virtual DbSet<Facturas> Facturas { get; set; }

    public virtual DbSet<LabDerivaciones> LabDerivaciones { get; set; }

    public virtual DbSet<Muestras> Muestras { get; set; }

    public virtual DbSet<Pacientes> Pacientes { get; set; }

    public virtual DbSet<Practicas> Practicas { get; set; }

    public virtual DbSet<PracticasLabDerivaciones> PracticasLabDerivaciones { get; set; }

    public virtual DbSet<Provincias> Provincias { get; set; }

    public virtual DbSet<TiposDocumentos> TiposDocumentos { get; set; }

    public virtual DbSet<TiposEstados> TiposEstados { get; set; }

    public virtual DbSet<TiposMuestras> TiposMuestras { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<sp_costo_deriv_por_laboratorioResult>().HasNoKey();

        modelBuilder.Entity<sp_costo_total_derivacionesResult>().HasNoKey();

        modelBuilder.Entity<sp_estado_muestrasResult>().HasNoKey();

        modelBuilder.Entity<sp_muestras_para_informarResult>().HasNoKey();

        modelBuilder.Entity<sp_practicas_fuera_coberturaResult>().HasNoKey();

        modelBuilder.Entity<Barrios>(entity =>
        {
            entity.HasKey(e => e.CodBarrio).HasName("pk_cod_barrio");

            entity.Property(e => e.CodBarrio).HasColumnName("cod_barrio");
            entity.Property(e => e.Barrio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("barrio");
            entity.Property(e => e.CodCiudad).HasColumnName("cod_ciudad");

            entity.HasOne(d => d.CodCiudadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.CodCiudad)
                .HasConstraintName("fk_cod_ciudad");
        });

        modelBuilder.Entity<Ciudades>(entity =>
        {
            entity.HasKey(e => e.CodCiudad).HasName("PK__Ciudades__2392A8AAA67D7EE1");

            entity.Property(e => e.CodCiudad).HasColumnName("cod_ciudad");
            entity.Property(e => e.Ciudad)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.CodProvincia).HasColumnName("cod_provincia");

            entity.HasOne(d => d.CodProvinciaNavigation).WithMany(p => p.Ciudades)
                .HasForeignKey(d => d.CodProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cod_provincia");
        });

        modelBuilder.Entity<Convenios>(entity =>
        {
            entity.HasKey(e => e.CodOs).HasName("PK__CONVENIO__9B1B933E6557E63E");

            entity.ToTable("CONVENIOS");

            entity.Property(e => e.CodOs)
                .ValueGeneratedNever()
                .HasColumnName("cod_os");
            entity.Property(e => e.ArancelUb)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("arancel_ub");
            entity.Property(e => e.EsActivo).HasColumnName("es_activo");
            entity.Property(e => e.FechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("fecha_alta");
            entity.Property(e => e.FechaBaja)
                .HasColumnType("datetime")
                .HasColumnName("fecha_baja");
            entity.Property(e => e.NomOs)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_os");
        });

        modelBuilder.Entity<ConveniosPracticas>(entity =>
        {
            entity.HasKey(e => e.CodConvPractica).HasName("PK__CONVENIO__A165EAF88B7BBD2F");

            entity.ToTable("CONVENIOS_PRACTICAS");

            entity.Property(e => e.CodConvPractica).HasColumnName("cod_conv_practica");
            entity.Property(e => e.CodNbu).HasColumnName("cod_nbu");
            entity.Property(e => e.CodOs).HasColumnName("cod_os");

            entity.HasOne(d => d.CodNbuNavigation).WithMany(p => p.ConveniosPracticas)
                .HasForeignKey(d => d.CodNbu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cod_nbu");

            entity.HasOne(d => d.CodOsNavigation).WithMany(p => p.ConveniosPracticas)
                .HasForeignKey(d => d.CodOs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cod_os_cp");
        });

        modelBuilder.Entity<DetallesFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalleFact).HasName("PK__DETALLES__0A0A87FABC8A2CE3");

            entity.ToTable("DETALLES_FACTURA");

            entity.Property(e => e.IdDetalleFact).HasColumnName("id_detalle_fact");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.CodNbu).HasColumnName("cod_nbu");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.CodNbuNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.CodNbu)
                .HasConstraintName("FK_DF_COD_NBU");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.DetallesFacturas)
                .HasForeignKey(d => d.NroFactura)
                .HasConstraintName("FK_DETALLES_FACTURA_nro_factura");
        });

        modelBuilder.Entity<DetallesMuestras>(entity =>
        {
            entity.HasKey(e => e.IdDetallesMuestras).HasName("PK__DETALLES__6A4509729EB7EC31");

            entity.ToTable("DETALLES_MUESTRAS");

            entity.Property(e => e.IdDetallesMuestras).HasColumnName("ID_DETALLES_MUESTRAS");
            entity.Property(e => e.CodNbu).HasColumnName("cod_nbu");
            entity.Property(e => e.Detalle)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DETALLE");
            entity.Property(e => e.IdMuestra).HasColumnName("id_muestra");
            entity.Property(e => e.IdTipoEstado).HasColumnName("id_tipo_estado");

            entity.HasOne(d => d.CodNbuNavigation).WithMany(p => p.DetallesMuestras)
                .HasForeignKey(d => d.CodNbu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cod_nbu_practica");

            entity.HasOne(d => d.IdMuestraNavigation).WithMany(p => p.DetallesMuestras)
                .HasForeignKey(d => d.IdMuestra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_id_muestra_practi");

            entity.HasOne(d => d.IdTipoEstadoNavigation).WithMany(p => p.DetallesMuestras)
                .HasForeignKey(d => d.IdTipoEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DETALLE_MUESTRAS_id_tipo_ESTADO");
        });

        modelBuilder.Entity<Facturas>(entity =>
        {
            entity.HasKey(e => e.NroFactura).HasName("PK__FACTURAS__B31FA9AFB536F020");

            entity.ToTable("FACTURAS");

            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.CodPaciente).HasColumnName("cod_paciente");
            entity.Property(e => e.Fecha).HasColumnName("fecha");

            entity.HasOne(d => d.CodPacienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.CodPaciente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_cod_paciente");
        });

        modelBuilder.Entity<LabDerivaciones>(entity =>
        {
            entity.HasKey(e => e.DerivadaA).HasName("PK__lab_deri__F27F102673361FD7");

            entity.ToTable("lab_derivaciones");

            entity.Property(e => e.DerivadaA).HasColumnName("derivada_a");
            entity.Property(e => e.CodCiudad).HasColumnName("cod_ciudad");
            entity.Property(e => e.EsActivo).HasColumnName("es_activo");
            entity.Property(e => e.NombreLaboratorioDerivado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_laboratorio_derivado");

            entity.HasOne(d => d.CodCiudadNavigation).WithMany(p => p.LabDerivaciones)
                .HasForeignKey(d => d.CodCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cod_ciudad_lab");
        });

        modelBuilder.Entity<Muestras>(entity =>
        {
            entity.HasKey(e => e.IdMuestra).HasName("PK__MUESTRAS__EB1A865AC765F906");

            entity.ToTable("MUESTRAS");

            entity.Property(e => e.IdMuestra).HasColumnName("id_muestra");
            entity.Property(e => e.CodPaciente).HasColumnName("cod_paciente");
            entity.Property(e => e.FechaRecoleccion).HasColumnName("fecha_recoleccion");
            entity.Property(e => e.IdTipoEstado).HasColumnName("id_tipo_estado");

            entity.HasOne(d => d.CodPacienteNavigation).WithMany(p => p.Muestras)
                .HasForeignKey(d => d.CodPaciente)
                .HasConstraintName("FK_MUESTRAS_cod_cliente");

            entity.HasOne(d => d.IdTipoEstadoNavigation).WithMany(p => p.Muestras)
                .HasForeignKey(d => d.IdTipoEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_id_tipo_ESTADO");
        });

        modelBuilder.Entity<Pacientes>(entity =>
        {
            entity.HasKey(e => e.CodPaciente).HasName("PK__paciente__DEC1E34175F981DE");

            entity.ToTable("pacientes");

            entity.Property(e => e.CodPaciente).HasColumnName("cod_paciente");
            entity.Property(e => e.Altura)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ALTURA");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Calle)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.CodBarrio).HasColumnName("cod_barrio");
            entity.Property(e => e.CodOs).HasColumnName("cod_os");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.IdTipoDocumento).HasColumnName("id_tipo_documento");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NroDoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_DOC");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("telefono");

            entity.HasOne(d => d.CodBarrioNavigation).WithMany(p => p.Pacientes)
                .HasForeignKey(d => d.CodBarrio)
                .HasConstraintName("fk_cod_barrio_pacientes");

            entity.HasOne(d => d.CodOsNavigation).WithMany(p => p.Pacientes)
                .HasForeignKey(d => d.CodOs)
                .HasConstraintName("fk_cod_os");

            entity.HasOne(d => d.IdTipoDocumentoNavigation).WithMany(p => p.Pacientes)
                .HasForeignKey(d => d.IdTipoDocumento)
                .HasConstraintName("fk_id_tipo_doc");
        });

        modelBuilder.Entity<Practicas>(entity =>
        {
            entity.HasKey(e => e.CodNbu).HasName("pk_cod_nbu");

            entity.ToTable("PRACTICAS");

            entity.Property(e => e.CodNbu)
                .ValueGeneratedNever()
                .HasColumnName("cod_nbu");
            entity.Property(e => e.CantUb).HasColumnName("cant_ub");
            entity.Property(e => e.DerivadaA).HasColumnName("derivada_a");
            entity.Property(e => e.EsActiva).HasColumnName("es_activa");
            entity.Property(e => e.IdTipoMuestra).HasColumnName("id_tipo_muestra");
            entity.Property(e => e.NomPractica)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nom_practica");

            entity.HasOne(d => d.DerivadaANavigation).WithMany(p => p.Practicas)
                .HasForeignKey(d => d.DerivadaA)
                .HasConstraintName("fk_derivada_a");

            entity.HasOne(d => d.IdTipoMuestraNavigation).WithMany(p => p.Practicas)
                .HasForeignKey(d => d.IdTipoMuestra)
                .HasConstraintName("FK_PRACTICAS_id_tipo_muestra");
        });

        modelBuilder.Entity<PracticasLabDerivaciones>(entity =>
        {
            entity.HasKey(e => e.CodPracLabDeriv).HasName("PK__PRACTICA__2C2E064107AEFE39");

            entity.ToTable("PRACTICAS_LAB_DERIVACIONES");

            entity.Property(e => e.CodPracLabDeriv).HasColumnName("cod_prac_lab_deriv");
            entity.Property(e => e.CodNbu).HasColumnName("cod_nbu");
            entity.Property(e => e.DerivadaA).HasColumnName("derivada_a");
            entity.Property(e => e.DiasDemora).HasColumnName("dias_demora");
            entity.Property(e => e.PrecioDeriv)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio_deriv");

            entity.HasOne(d => d.CodNbuNavigation).WithMany(p => p.PracticasLabDerivaciones)
                .HasForeignKey(d => d.CodNbu)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nbu");

            entity.HasOne(d => d.DerivadaANavigation).WithMany(p => p.PracticasLabDerivaciones)
                .HasForeignKey(d => d.DerivadaA)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_derivada_a_prac");
        });

        modelBuilder.Entity<Provincias>(entity =>
        {
            entity.HasKey(e => e.CodProvincia).HasName("PK__Provinci__F30237D93740A07D");

            entity.Property(e => e.CodProvincia).HasColumnName("cod_provincia");
            entity.Property(e => e.Provincia)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("provincias");
        });

        modelBuilder.Entity<TiposDocumentos>(entity =>
        {
            entity.HasKey(e => e.IdTipoDocumento).HasName("PK__tipos_do__9F38507C9EA61F81");

            entity.ToTable("tipos_documentos");

            entity.Property(e => e.IdTipoDocumento).HasColumnName("id_tipo_documento");
            entity.Property(e => e.Detalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("detalle");
        });

        modelBuilder.Entity<TiposEstados>(entity =>
        {
            entity.HasKey(e => e.IdTipoEstado).HasName("PK__TIPOS_Es__D1D82A351C58D068");

            entity.ToTable("TIPOS_Estados");

            entity.Property(e => e.IdTipoEstado).HasColumnName("id_tipo_estado");
            entity.Property(e => e.Estado)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("estado");
        });

        modelBuilder.Entity<TiposMuestras>(entity =>
        {
            entity.HasKey(e => e.IdTipoMuestra).HasName("PK__TIPOS_MU__64A632E1986F407A");

            entity.ToTable("TIPOS_MUESTRAS");

            entity.Property(e => e.IdTipoMuestra).HasColumnName("id_tipo_muestra");
            entity.Property(e => e.TipoMuestra)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo_muestra");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}